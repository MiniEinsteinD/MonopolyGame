
Project
--------
    - Decided on delegating the majority of the game input and output on the Monopoly class.

    - This was done to create a more optimal class for the implementation of the Graphical User Interface (GUI) that
      is to be implemented in the next Milestone and continue later into the project.

MonopolyView, MonopolyEvent, MonopolyFrame - Ethan Houlahan (101145675)
------------------------------------------------------------------------
    - Used to create a Graphical User Interface (GUI) for player input and output

    - Following the MVC pattern, view receives model (Monopoly) information via a notify method.

    - A first frame was deemed to be the most efficient solution to receive the number of players before launching
    game properly

    - The buttons each implement a controller responsible for their operation. These controllers relay action events
    to the model which processes the information

    - The view receives an update notification via a MonopolyEvent which updates the GUI (MonopolyFrame) via the
    handleMonopolyUpdate method and applies the new information into the GUI.


Player
------
    - Use final data types for ID and COLOR to prevent data manipulation by the user.

    - buyProperty() and payFine() return boolean values to indicate the method's success or failure so the Monopoly
      class can handle it.

    - Feeds String dialog to the Monopoly class for output in the form of a StringBuilder.

Tile
-----
    - Used an abstract class because we want to provide implementations of methods for future functionality

    - Used an abstract class to prevent the user from creating tile objects independently.

    - In future builds of the project, intended on handling special Tiles such as Go, Jail, etc.

Property (extends Tile)
------------------------
    - Use final data types for GROUP, PRICE, and FINE_PERCENTAGE to prevent data manipulation by the user.

    - Feeds String dialog to the Monopoly class for output in the form of a StringBuilder.

Two Dice
---------
    - Didn't want to generate a single int number from 2-12 because the real world counterpart uses 2 six-sided dice,
      the outcome of this is not evenly distributed.

    - Two separate dice attributed negates this downside and provides an accurate simulation of the real world.
