@startuml Monopoly Class Diagram

title Monopoly Class Diagram

skinparam classAttributeIconSize 0
skinparam monochrome true
hide circle

abstract class Tile {
    - NAME: String
    + Tile(tName: String)
    + getName(): String
    + passHandler(sb: StringBuilder, player: Player): void
    + landHandler(sb: StringBuilder, player: Player): void
    + toString(): String
}

class TwoDice {
    - firstRoll: int
    - secondRoll: int
    + TwoDice()
    + isDouble(): boolean
    + dieSum(): int
    + roll(): void
}

class Player {
    - ID: String
    - wallet: int
    - properties: ArrayList<Property>
    - position: int
    - COLOR: String
    - monopoly: Monopoly
    + Player(id: String, color: String, Monopoly monopoly)
    + getColor(): String
    + getPosition(): int
    + setPosition(position: int): void
    + getWallet(): int
    + setWallet(wallet: int): void
    + buyProperty(sb: StringBuilder, property: Property): boolean
    + payFine(sb: StringBuilder, property: Property): boolean
    + movePlayer(sb: StringBuilder, steps: int, tiles: ArrayList<Tile>): void
    + toString(): String
    + equals(o: Object): boolean
    + hashCode(): int
}

class Monopoly {
    - TILES: ArrayList<Tile>
    - activePlayer: Player
    - players: ArrayList<Player>
    - dice: TwoDice
    - running: boolean
    - numSolventPlayers: int
    - eventString: String
    - moved: boolean
    - activePlayerIndex: int
    # <u>MIN_PLAYERS: int</u>
    # <u>MAX_PLAYERS: int</u>
    - <u>COLORS: ArrayList<String></u>
    - views: ArrayList<MonopolyView>
    + Monopoly()
    + addView(mv: MonopolyView): void
    + removeView(mv: MonopolyView): void
    + getEventString(): String
    + isRunning: boolean
    + getPlayers(): ArrayList<Player>
    + getNumSolventPlayers: int
    + getActivePlayer(): Player
    + getTILES(): ArrayList<Tile>
    + start(numPlayers: int): void
    + state(): void
    + buy(): void
    + roll(): void
    - generateRoll(sb: StringBuilder): void
    - move(sb: StringBuilder): void
    + bankrupt(sb: StringBuilder): void
    + passTurn(): void
    - notifyViews(): void
    + help(): void

}

class Property {
    - owner: Player
    - GROUP: String
    - PRICE: int
    - owned: boolean
    # <u>FINE_PERCENTAGE: double</u>
    + Property(group: String, name: String, price: int)
    + setOwner(p: Player): void
    + getOwner(): Player
    + isOwned(): boolean
    + getPrice(): int
    + getGroup(): String
    + getFine(): int
    + toString(): String
    + equals(o: Object): boolean
    + hashCode(): int
    + passHandler(sb: StringBuilder, player: Player): void
    + landHandler(sb: StringBuilder, player: Player): void
}

abstract class MonopolyController {

}

class PlayerStateController {
    + PlayerStateController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class PassController {
    + PassController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class BuyController {
    + BuyController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class HelpController {
    + HelpController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class RollController {
    + RollController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class MonopolyFrame {
}

class MonopolyView <<Interface>> {
}

class House {
}

class Hotel {
}

Monopoly --o Player
PassController --|> MonopolyController

@enduml