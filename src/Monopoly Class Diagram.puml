@startuml Monopoly Class Diagram

title Monopoly Class Diagram

skinparam classAttributeIconSize 0
skinparam monochrome true
hide circle

abstract class Tile {
    - NAME: String
    + Tile(tName: String)
    + getName(): String
    + passHandler(sb: StringBuilder, player: Player): void
    + landHandler(sb: StringBuilder, player: Player): void
    + toString(): String
}
class VersionFormat{
    - tiles: ArrayList<Tile>
    - elementStacks: Stack<String>
    - currencySign: String
    - propertyName: String
    - propertyPrice: int
    - group: String
    - utilityName: String
    - utilityPrice: int
    - railRoadName: String
    - railRoadPrice: int
    + VersionFormat()
    + importFormat(filename: String): void
    + getTiles(): ArrayList<Tile>
    + getCurrencySign(): String
    + startElement(uri: java.lang.String ,localName: java.lang.String , qName: java.lang.String , attributes: org.xml.sax.Attributes ): void
    + endElement(uri: String , localName: String, qName: String): void
    + characters(ch: char[], start: int, length: int): void
}
class TwoDice {
    - firstRoll: int
    - secondRoll: int
    + TwoDice()
    + isDouble(): boolean
    + dieSum(): int
    + roll(): void
}

class Player {
    - ID: String
    - wallet: int
    - properties: ArrayList<Buyable>
    - position: int
    - COLOR: String
    - COLORCODE: Color
    - monopoly: Monopoly
    - type: Type
    - jailId: int
    - daysJailed: int
    + Player(id: String, color: String, colorCode: Color, monopoly: Monopoly)
    + Player(id: String, color: String, colorCode: Color, monopoly: Monopoly, type: Type)
    + getCOLORCODE(): Color
    + getType(): Type
    + getCOLOR(): String
    + getPosition(): int
    + setPosition(position: int): void
    + getWallet(): int
    + setWallet(wallet: int): void
    + getJailId(): int
    + setJailId(jailId: int): void
    + getDaysJailed(): int
    + escapedJail(): void
    + buyProperty(sb: StringBuilder, property: Property): boolean
    + payFine(sb: StringBuilder, property: Property): boolean
    + movePlayer(sb: StringBuilder, steps: int, tiles: ArrayList<Tile>): void
    + toString(): String
    + equals(o: Object): boolean
    + hashCode(): int
}

enum Type {
    HUMAN
    BOT
}

class Monopoly {
    - tiles: ArrayList<Tile>
    - activePlayer: Player
    - players: ArrayList<Player>
    - dice: TwoDice
    - running: boolean
    - numSolventPlayers: int
    - eventString: String
    - moved: boolean
    - activePlayerIndex: int
    # <u>MIN_PLAYERS: int</u>
    # <u>MAX_PLAYERS: int</u>
    - <u>COLORS: ArrayList<String></u>
    - <u>COLORCODES: ArrayList<Color></u>
    - views: ArrayList<MonopolyView>
    - jails: ArrayList<Jail>
    # <u>lastRoll: int </u>
    + <u>currencySign: String</u>
    + Monopoly()
    + importFormat(filename: String): void
    + addView(mv: MonopolyView): void
    + removeView(mv: MonopolyView): void
    + setupJailViews(): void
    + setMoved(moved: boolean): void
    + isMoved(): boolean
    + <u> getLastRoll: int </u>
    + getNumBuildablesInGroup(group: String): int
    + getEventString(): String
    + playerMoveNeeded(): boolean
    + isRunning(): boolean
    + getPlayers(): ArrayList<Player>
    + getNumSolventPlayers(): int
    + getActivePlayer(): Player
    + getTiles(): ArrayList<Tile>
    + start(numPlayers: int, numBots: int): void
    + state(): void
    + buy(): void
    + roll(): void
    - generateRoll(sb: StringBuilder): void
    - move(sb: StringBuilder): void
    + directMove(int steps): void
    - resetDice(): void
    + bankrupt(sb: StringBuilder): void
    + passTurn(): void
    + notifyViews(): void
    + help(): void
    - handleBotActions(): void
    + build(buildable: Buildable): void
    + exportMonopoly(filename: String): void
    + importMonopoly(filename: String): void
}

class MonopolyEvent(){
    - activePlayer: Player
    + MonopolyEvent(monopoly: Monopoly)
    + getActivePlayer(): Player
}

class Property {
    - owner: Player
    - GROUP: String
    - PRICE: int
    - owned: boolean
    # <u>FINE_PERCENTAGE: double</u>
    - devLevel: int
    - houseFine: d

    + Property(group: String, name: String, price: int)
    + setOwner(p: Player): void
    + remOwner(): void
    + getOwner(): Player
    + isOwned(): boolean
    + getPrice(): int
    + getGroup(): String
    + getFine(): int
    + toString(): String
    + equals(o: Object): boolean
    + hashCode(): int
    + passHandler(sb: StringBuilder, player: Player): void
    + landHandler(sb: StringBuilder, player: Player): void

}

abstract class MonopolyController {
    - model: Monopoly
    + MonopolyController(model: Monopoly)
}

class PlayerStateController {
    + PlayerStateController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class PassController {
    + PassController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class BuyController {
    + BuyController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class HelpController {
    + HelpController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class RollController {
    + RollController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class BuildController {
    + BuildController(model: Monopoly)
    + actionPerformed(e: ActionEvent): void
}

class SetBuildableTilesController {
    - buildable: Buildable
    - frame: JFrame
    + BuildController(model: Monopoly, frame: JFrame, buildable: Buildable)
    + actionPerformed(e: ActionEvent): void
}

class MonopolyFrame {
    - numPlayerMenu: JFrame
    - numPanelText: JLabel
    - numPanel: JPanel
    - numPlayerBotMenu: JFrame
    - numBotPanel: JPanel
    - numBotPanelText: JLabel
    - internationalVersionMenu: JFrame
    - internationalVersionPanel: JPanel
    - englishVersion: JButton
    - arabicVersion: JButton
    - versionPanelText: JLabel
    - rollButton: JButton
    - buyButton: JButton
    - passButton: JButton
    - playerOverviewButton: JButton
    - helpButton: JButton
    - buildButton: JButton
    - slMenuBar: JMenuBar
    - saveLoadMenu: JMenu
    - saveMenuItem: JMenuItem
    - loadMenuItem: JMenuItem
    - walletStateText: JLabel
    - activePlayerText: JLabel
    - boardMap: JLabel
    - boardPane: JPanel
    - infoPane: JPanel
    + MonopolyFrame()
    - makeForegroundColor(focus: Color): Color
    + handleMonopolyUpdate(e: MonopolyEvent): void
    + <u>main(args: String[]): void</u>
}

class SetBuildableTilesFrame {
    - model: Monopoly
    + SetBuildableTilesFrame(model: Monopoly)
    + handleMonopolyUpdate(e: MonopolyEvent): void
}

class MonopolyView <<Interface>> {
    + handleMonopolyUpdate(e: MonopolyEvent): void
}

interface Buildable <<Interface>> {
    + buildHandler(sb: StringBuilder): void
    + getGroup(): String
    + getDevLevel: int
}

interface Buyable <<Interface>> {
       + getFine(): int
       +getOwner(): Player
       +setOwner(player: Player): void
       +isOwned(): boolean
       +getGroup(): String
       +getPrice(): int
       +remOwner(): void
}



class GoTile {
    -<u> GONAME: String </u>
    +GoTile():
    + landHandler(sb: StringBuilder,player: Player): void
    + passHandler(sb: StringBuilder,player: Player): void
}

class Jail {
    +<u>FINE: int</u>
    +<u>WAIT_RELEASE_NUM_DAYS: int</u>
    -ID: int
    -monopoly: Monopoly
    -dice: TwoDice
    +Jail(name: String, id: int, monopoly: Monopoly)
    +waitEscape(activePlayer: Player): boolean
    +rollEscape(activePlayer: Player): boolean
    +fineEscape(activePlayer: Player): boolean
    +toString():String
}

class GoToJail {
    -jailPosition: int
    -jailId: int
    +GoToJail()
    +landHandler(StringBuilder sb, Player player): void
}

class RailroadTile {
    -owner: Player
    -GROUP: String
    -PRICE: int
    -BASERENT: int
    -owned: boolean
    + RailroadTile(name:String,startingPrice:int)
    +getPrice():int
    +setOwner(p: Player):void
    +remOwner():void
    +getOwner():Player
    +isOwned():boolean
    +getGroup():String
    +getFine():int
    +toString():String
    +landHandler(sb: StringBuilder,player: Player):void
    +equals():boolean
    +hashCode():int

}

class UtilityTile {
    -owner: Player
    -GROUP: String
    -PRICE: int
    -owned: boolean

    + UtilityTile(name:String,startingPrice:int)
    +getPrice():int
    +setOwner(p: Player):void
    +remOwner():void
    +getOwner():Player
    +isOwned():boolean
    +getGroup():String
    +getFine():int
    +toString():String
    +landHandler(sb: StringBuilder,player: Player):void
    +equals():boolean
    +hashCode():int
}

class PlayerBot {
    - <u>MIN_WALLET: int</u>
    - <u>DELAY_TIME: int</u>
    + <u>selectActions(SelectActionsEvent sae): void</u>
}

class SelectActionsEvent {
    - player: Player
    + SelectActionsEvent(monopoly: Monopoly, player: Player)
    + getPlayer(): Player
}

Monopoly o--o Player
Monopoly o-- Tile
BuildController --|> MonopolyController
SetBuildableTilesController --|> MonopolyController
PassController --|> MonopolyController
BuyController --|> MonopolyController
HelpController --|> MonopolyController
PlayerStateController --|> MonopolyController
RollController --|> MonopolyController
JFrame --|> MonopolyFrame
MonopolyFrame --> MonopolyView
SetBuildableTilesFrame --> MonopolyView
MonopolyView --o Monopoly
MonopolyController o-- Monopoly
Monopoly o-- TwoDice
Player *-- Type

GoTile --|> Tile
Jail --|> Tile
GoToJail --|> Tile
RailroadTile --> Buyable
RailroadTile --|> Tile
Property --|> Tile
UtilityTile --|> Tile
UtilityTile --> Buyable

Property --> Buildable
Property --> Buyable

Player o-- Buyable
Monopoly o-- VersionFormat

SelectActionsEvent o-- Player
SelectActionsEvent o-- Monopoly

@enduml